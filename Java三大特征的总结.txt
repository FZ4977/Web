1-类
  概念>>类是一个模板，它描述一类对象的行为和状态。
        类是对象的抽象
2-对象
  概念>>对象是类的实例
3-抽象类
  抽象类的特点>>
  抽象方法一定在抽象类中。
  抽象方法和抽象类都是abstract关键字修饰。
  抽象类不可以用new创建和实例化对象。因为抽象类本身就是不完整的。
  子类继承父类(抽象类)，必须重写父类中所有的抽象方法。除非子类也是抽象类
  抽象方法没有方法体。
  构造方法，类方法（static修饰的）不能声明为抽象方法
  抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类
4-继承
  extends关键字修饰
  Java是单继承，但是可以多层继承。
  子类可以访问父类的成员(private修饰的除外)
  子类不能继承父类的构造方法
  super关键字调用父类的属性和方法，放在方法第一行
  优点>>方便修改代码，代码可以重用。
5-static
  static方法中不能使用this和super关键字，不能调用非static方法
  static代码块只会被执行一次
  static方法也不能访问非static类型的变量。
6-重写
  参数列表，返回类型相同
  访问权限不能比父类中被重写的方法的访问权限更低。
  父类的成员方法只能被它的子类重写。
  声明为final的方法不能被重写。
  声明为static的方法不能被重写，但是能够被再次声明。
  子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。
  子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。
  构造方法不能被重写。
  如果不能继承一个方法，则不能重写这个方法。
7-重载
  同一个类里面，方法名字相同，而参数不同。
  必须改变参数列表(参数个数或类型不一样)
  与修饰符，返回值类型无关
8-final
  修饰属性或变量--值不能变（地址不能变）内容可以变
  修饰对象的不能重新赋值，对象的属性的值可以改变
  修饰方法--可以被继承，但继承后不能被重写。
  修饰类--类不可以被继承
9-构造方法
  默认的无参构造方法
  方法名和类名相同
  没有返回值类型
  作用是>>可以用来初始化
10-封装
  属性私有化，提供公有的方法访问私有属性
  作用>>避免不合理赋值，增加了程序的可维护性
11-this super关键字
  this通常指代当前对象，super通常指代父类
  类方法（有static的）中不能使用super、this关键字
  this作用>>避免成员变量
  this表示对当前对象的引用，类的成员变量
  super调用由父类声明的构造方法，写在第一句
12-抽象方法
  见楼上第二点
13-修饰符
  default (默认）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。
  private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）
  public : 对所有类可见。使用对象：类、接口、变量、方法
  protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。
14-多态
  概念>>指允许不同类的对象对同一消息做出响应
  实现多态有三个必要条件：
  继承是多态的基础
  重写父类的方法
  将子类的引用赋给父类对象--这样才能够具备技能调用父类的方法和子类的方法
  作用：提高代码的可扩展性和可维护性
  多态体现为两种方式：重写和重载
    重写是父子类之间多态的体现，它的好处就是可以屏蔽不同子类对象之间的差异，写出通用的代码，做出通用的编程，以适应需求的不断变化。
    重载是本类之间多态的体现，它的好处是可以满足用户在针对同一对象可以调用同一方法的不同功能体现，以最大限度适应用户的不同需求

 